@page
@using Microsoft.AspNetCore.Authorization
@using PayrollPro.Employees
@using PayrollPro.Web.Pages.Employees
@model IndexModel
@{
    ViewData["Title"] = "Employee Management";
}

@section styles {
    <!-- SweetAlert2 for Professional Notifications -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="~/css/employee-management-modern.css" />
}

<div class="employee-management-container">
    <!-- Modern Professional Header -->
    <div class="employee-header">
        <div class="container-fluid">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h1>
                        <i class="fas fa-users me-3"></i>
                        Employee Management
                    </h1>
                    <p class="subtitle">Manage your workforce and employee information</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/Employees/Create?companyId=@(ViewContext.HttpContext.Request.Query["companyId"])" class="btn-add-employee">
                        <i class="fas fa-user-plus"></i>
                        Add Employee
                    </a>
                    <a href="/Companies" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left me-2"></i> Back to Companies
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="employee-stats-grid">
        <div class="stat-card" style="--delay: 0">
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-value" id="totalEmployees">@Model.Employees.TotalCount</div>
            <div class="stat-label">Total Employees</div>
        </div>
        
        <div class="stat-card success" style="--delay: 1">
            <div class="stat-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-value" id="activeEmployees">@Model.Employees.Items.Count(e => e.Status == EmployeeStatus.Active)</div>
            <div class="stat-label">Active Employees</div>
        </div>
        
        <div class="stat-card warning" style="--delay: 2">
            <div class="stat-icon">
                <i class="fas fa-building"></i>
            </div>
            <div class="stat-value" id="departments">@Model.Employees.Items.Select(e => e.Department).Distinct().Count()</div>
            <div class="stat-label">Departments</div>
        </div>
        
        <div class="stat-card purple" style="--delay: 3">
            <div class="stat-icon">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="stat-value" id="avgSalary">@(Model.Employees.Items.Any() ? $"${Model.Employees.Items.Average(e => e.Salary):N0}" : "$0")</div>
            <div class="stat-label">Average Salary</div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
        <h4>
            <i class="fas fa-filter"></i>
            Filter & Search
        </h4>
        <div class="filter-grid">
            <div class="form-group">
                <label class="form-label">Search Employees</label>
                <div class="search-input-group">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" placeholder="Search by name, email, or position..." id="employeeSearch">
                </div>
            </div>
            <div class="form-group">
                <label class="form-label">Company</label>
                <select class="form-select" id="companyFilter">
                    <option value="">All Companies</option>
                    @foreach (var company in Model.Companies.Items)
                    {
                        var isSelected = company.Id.ToString() == ViewContext.HttpContext.Request.Query["companyId"];
                        <option value="@company.Id" selected="@isSelected">@company.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Department</label>
                <select class="form-select" id="departmentFilter">
                    <option value="">All Departments</option>
                    @foreach (var dept in Model.Employees.Items.Select(e => e.Department).Distinct().OrderBy(d => d))
                    {
                        <option value="@dept">@dept</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Status</label>
                <select class="form-select" id="statusFilter">
                    <option value="">All Status</option>
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                    <option value="OnLeave">On Leave</option>
                    <option value="Terminated">Terminated</option>
                </select>
            </div>
            <div class="filter-actions">
                <button class="btn-filter" onclick="clearFilters()" title="Clear Filters">
                    <i class="fas fa-times"></i>
                </button>
                <button class="btn-filter" onclick="exportEmployees()" title="Export Data">
                    <i class="fas fa-download"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- View Toggle -->
    <div class="view-toggle">
        <h4>
            <i class="fas fa-eye me-2"></i>
            Employee Directory
            <span class="badge bg-primary ms-2" id="visibleCount">@Model.Employees.Items.Count()</span>
        </h4>
        <div class="view-buttons">
            <button class="view-btn" data-view="cards">
                <i class="fas fa-th-large me-1"></i> Cards
            </button>
            <button class="view-btn active" data-view="table">
                <i class="fas fa-table me-1"></i> Table
            </button>
        </div>
    </div>

    <!-- Employees Container -->
    <div class="employees-container">
        @if (Model.Employees.Items.Any())
        {
            <!-- Card View (Hidden by default) -->
            <div class="employees-grid" id="cardView" style="display: none;">
                @{int cardIndex = 0;}
                @foreach (var employee in Model.Employees.Items)
                {
                    <div class="employee-card" style="--delay: @(cardIndex % 6)" 
                         data-company="@employee.CompanyId" 
                         data-department="@employee.Department" 
                         data-status="@employee.Status"
                         data-search="@employee.FullName.ToLower() @employee.Email.ToLower() @employee.Position.ToLower() @employee.Department.ToLower()">
                        
                        <div class="employee-status @($"status-{employee.Status.ToString().ToLower()}")">
                            @employee.Status
                        </div>
                        
                        <div class="employee-card-header">
                            <div class="employee-avatar">
                                @employee.FirstName.Substring(0, 1)@employee.LastName.Substring(0, 1)
                            </div>
                            <div class="employee-info">
                                <div class="employee-name">@employee.FullName</div>
                                <div class="employee-position">@employee.Position</div>
                                <div class="employee-contact">
                                    <div class="contact-item">
                                        <i class="fas fa-envelope"></i>
                                        <span>@employee.Email</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(employee.Phone))
                                    {
                                        <div class="contact-item">
                                            <i class="fas fa-phone"></i>
                                            <span>@employee.Phone</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="employee-details">
                            <div class="detail-item">
                                <div class="detail-label">Company</div>
                                <div class="detail-value">
                                    <span class="company-badge">
                                        <i class="fas fa-building"></i>
                                        @employee.CompanyName
                                    </span>
                                </div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Department</div>
                                <div class="detail-value">@employee.Department</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Hire Date</div>
                                <div class="detail-value">@employee.HireDate.ToString("MMM dd, yyyy")</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Salary</div>
                                <div class="detail-value salary-value">@employee.FormattedSalary</div>
                            </div>
                        </div>
                        
                        <div class="employee-actions">
                            <a href="/Payroll/Employee/@employee.Id" class="action-btn btn-payroll" title="View Payroll">
                                <i class="fas fa-money-bill"></i>
                            </a>
                            <a href="/Employees/Edit/@employee.Id" class="action-btn btn-edit" title="Edit Employee">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="action-btn btn-delete" title="Delete Employee" onclick="deleteEmployee('@employee.Id', '@employee.FullName')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    cardIndex++;
                }
            </div>

            <!-- Table View (Default) -->
            <div class="table-container" id="tableView">
                <table class="table" id="employeesTable">
                    <thead>
                        <tr>
                            <th><i class="fas fa-user me-2"></i>Employee</th>
                            <th><i class="fas fa-briefcase me-2"></i>Department</th>
                            <th><i class="fas fa-id-badge me-2"></i>Position</th>
                            <th><i class="fas fa-dollar-sign me-2"></i>Salary</th>
                            <th><i class="fas fa-calendar me-2"></i>Hire Date</th>
                            <th><i class="fas fa-circle me-2"></i>Status</th>
                            <th><i class="fas fa-cog me-2"></i>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{int rowIndex = 0;}
                        @foreach (var employee in Model.Employees.Items)
                        {
                            <tr data-company="@employee.CompanyId" 
                                data-department="@employee.Department" 
                                data-status="@employee.Status"
                                data-search="@employee.FullName.ToLower() @employee.Email.ToLower() @employee.Position.ToLower() @employee.Department.ToLower()"
                                style="--row-delay: @rowIndex">
                                <td>
                                    <div class="employee-name-cell">
                                        <div class="table-avatar">
                                            @employee.FirstName.Substring(0, 1)@employee.LastName.Substring(0, 1)
                                        </div>
                                        <div class="name-details">
                                            <div class="employee-name-table">@employee.FullName</div>
                                            <div class="employee-position-table">@employee.Email</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="detail-value">@employee.Department</div>
                                </td>
                                <td>
                                    <div class="detail-value">@employee.Position</div>
                                </td>
                                <td>
                                    <div class="salary-table">@employee.FormattedSalary</div>
                                </td>
                                <td>
                                    <div class="detail-value">@employee.HireDate.ToString("MMM dd, yyyy")</div>
                                </td>
                                <td>
                                    <span class="status-badge-table status-@(employee.Status.ToString().ToLower())-table">
                                        @employee.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="actions-table">
                                        <a href="/Payroll/Employee/@employee.Id" class="action-btn-table btn-payroll-table" title="View Payroll">
                                            <i class="fas fa-money-bill"></i>
                                        </a>
                                        <a href="/Employees/Edit/@employee.Id" class="action-btn-table btn-edit-table" title="Edit Employee">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="action-btn-table btn-delete-table" title="Delete Employee" onclick="deleteEmployee('@employee.Id', '@employee.FullName')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            rowIndex++;
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-users"></i>
                </div>
                <h3>No Employees Found</h3>
                <p>Start building your team by adding your first employee. Track their information, manage payroll, and streamline your HR processes.</p>
                <a href="/Employees/Create?companyId=@(ViewContext.HttpContext.Request.Query["companyId"])" class="btn-add-employee">
                    <i class="fas fa-user-plus"></i>
                    Add First Employee
                </a>
            </div>
        }
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // Show success/error messages on page load
            @if(TempData["SuccessMessage"] != null)
            {
                <text>
                Swal.fire({
                    title: 'Success!',
                    text: '@TempData["SuccessMessage"]',
                    icon: 'success',
                    confirmButtonColor: '#10B981',
                    confirmButtonText: 'Great!',
                    timer: 3000,
                    showConfirmButton: true
                });
                </text>
            }
            
            @if(TempData["ErrorMessage"] != null)
            {
                <text>
                Swal.fire({
                    title: 'Error!',
                    text: '@TempData["ErrorMessage"]',
                    icon: 'error',
                    confirmButtonColor: '#EF4444',
                    confirmButtonText: 'OK'
                });
                </text>
            }

            // Search and filter functionality
            function filterEmployees() {
                const searchTerm = $('#employeeSearch').val().toLowerCase();
                const companyFilter = $('#companyFilter').val();
                const departmentFilter = $('#departmentFilter').val();
                const statusFilter = $('#statusFilter').val();
                
                let visibleCount = 0;
                
                $('.employee-card, #employeesTable tbody tr').each(function() {
                    const $element = $(this);
                    const searchData = $element.data('search') || $element.text().toLowerCase();
                    const company = $element.data('company');
                    const department = $element.data('department');
                    const status = $element.data('status');
                    
                    let showElement = true;
                    
                    // Search filter
                    if (searchTerm && searchData.indexOf(searchTerm) === -1) {
                        showElement = false;
                    }
                    
                    // Company filter
                    if (companyFilter && company != companyFilter) {
                        showElement = false;
                    }
                    
                    // Department filter
                    if (departmentFilter && department != departmentFilter) {
                        showElement = false;
                    }
                    
                    // Status filter
                    if (statusFilter && status != statusFilter) {
                        showElement = false;
                    }
                    
                    $element.toggle(showElement);
                    if (showElement) visibleCount++;
                });
                
                $('#visibleCount').text(visibleCount);
            }
            
            // Attach filter events
            $('#employeeSearch, #companyFilter, #departmentFilter, #statusFilter').on('input change', filterEmployees);
            
            // View toggle functionality
            $('.view-btn').on('click', function() {
                const view = $(this).data('view');
                
                $('.view-btn').removeClass('active');
                $(this).addClass('active');
                
                if (view === 'cards') {
                    $('#cardView').show();
                    $('#tableView').hide();
                } else {
                    $('#cardView').hide();
                    $('#tableView').show();
                }
            });
            
            // Animate cards on load
            $('.employee-card').each(function(index) {
                $(this).css('animation-delay', (index * 0.1) + 's');
            });
        });
        
        // Clear filters function
        function clearFilters() {
            $('#employeeSearch').val('');
            $('#companyFilter').val('');
            $('#departmentFilter').val('');
            $('#statusFilter').val('');
            
            $('.employee-card, #employeesTable tbody tr').show();
            $('#visibleCount').text($('.employee-card').length);
            
            Swal.fire({
                title: 'Filters Cleared!',
                text: 'All filters have been reset.',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false,
                toast: true,
                position: 'top-end'
            });
        }
        
        // Export employees function
        function exportEmployees() {
            Swal.fire({
                title: 'Export Employee Data',
                text: 'Choose export format:',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10B981',
                cancelButtonColor: '#6B7280',
                confirmButtonText: '<i class="fas fa-file-excel me-1"></i>Export to Excel',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Exporting...',
                        text: 'Preparing your employee data for download.',
                        icon: 'info',
                        timer: 2000,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    }).then(() => {
                        Swal.fire({
                            title: 'Export Complete!',
                            text: 'Employee data has been exported successfully.',
                            icon: 'success',
                            confirmButtonText: 'Download',
                            confirmButtonColor: '#10B981'
                        });
                    });
                }
            });
        }
        
        // Delete employee function
        function deleteEmployee(id, name) {
            Swal.fire({
                title: 'Delete Employee?',
                text: `Are you sure you want to delete ${name}? This action cannot be undone.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#EF4444',
                cancelButtonColor: '#6B7280',
                confirmButtonText: '<i class="fas fa-trash me-1"></i>Yes, Delete',
                cancelButtonText: 'Cancel',
                backdrop: true,
                allowOutsideClick: false
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Removing employee from the system.',
                        icon: 'info',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    // Simulate API call
                    setTimeout(() => {
                        Swal.fire({
                            title: 'Employee Deleted!',
                            text: `${name} has been successfully removed from the system.`,
                            icon: 'success',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#10B981'
                        }).then(() => {
                            // Remove the employee card/row from view
                            $(`.employee-card[data-search*="${name.toLowerCase()}"], #employeesTable tr:contains("${name}")`).fadeOut(300, function() {
                                $(this).remove();
                                
                                // Update counters
                                const newTotal = $('.employee-card').length;
                                $('#totalEmployees').text(newTotal);
                                $('#visibleCount').text(newTotal);
                            });
                        });
                    }, 2000);
                }
            });
        }
        
        // Refresh page function
        function refreshPage() {
            window.location.reload();
        }
        
        // Add some interactive hover effects
        $('.employee-card').hover(
            function() {
                $(this).find('.employee-actions').css('opacity', '1');
            },
            function() {
                $(this).find('.employee-actions').css('opacity', '0.7');
            }
        );
    </script>
}