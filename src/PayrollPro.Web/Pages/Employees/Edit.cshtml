@page "/Employees/Edit/{id}"
@using PayrollPro.Employees
@using PayrollPro.Web.Pages.Employees
@model EditModel
@{
    ViewData["Title"] = "Edit Employee";
}

@section styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="~/css/employee-management-modern.css" />
    <style>
        /* Enhanced UI Loading States */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Enhanced form validation styles */
        .form-control:invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        .form-control:valid {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        
        /* Edit Employee Container */
        .edit-employee-container {
            background: #f8f9fa;
            min-height: 100vh;
            padding: 0;
        }
        
        /* Override employee-header for edit page */
        .edit-employee-container .employee-header {
            background: linear-gradient(135deg, #3B82F6 0%, #1E40AF 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }
        
        /* Form styling for edit page */
        .edit-employee-container .form-control,
        .edit-employee-container .form-select {
            background-color: white;
            border: 1px solid #ced4da;
        }
        
        .edit-employee-container .form-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Better button states */
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        /* Enhanced error display */
        .field-validation-error {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
        }
        
        /* Improved focus states */
        .form-control:focus, .form-select:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
    </style>
}

<div class="edit-employee-container">
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <!-- Modern Professional Header -->
    <div class="employee-header">
        <div class="container-fluid">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h1>
                        <i class="fas fa-edit me-3"></i>
                        Edit Employee
                    </h1>
                    <p class="subtitle">Update employee information and details</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/Employees?companyId=@Model.Employee.CompanyId" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left me-2"></i> Back to Employees
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Form -->
    <div class="edit-form-container">
        <div class="form-card">
            <div class="form-header">
                <h3>Employee Information</h3>
                <p>Update the employee details below</p>
            </div>

            <form method="post" class="employee-form">
                <input type="hidden" asp-for="EmployeeId" />
                <input type="hidden" asp-for="Employee.CompanyId" />

                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="alert alert-danger mb-4">
                        <h6><i class="fas fa-exclamation-triangle me-2"></i>Please correct the following errors:</h6>
                        <div asp-validation-summary="All"></div>
                    </div>
                }

                <div class="form-grid">
                    <!-- Personal Information -->
                    <div class="form-section">
                        <h4>Personal Information</h4>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label asp-for="Employee.FirstName" class="form-label">First Name</label>
                                <input asp-for="Employee.FirstName" class="form-control" />
                                <span asp-validation-for="Employee.FirstName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Employee.LastName" class="form-label">Last Name</label>
                                <input asp-for="Employee.LastName" class="form-control" />
                                <span asp-validation-for="Employee.LastName" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label asp-for="Employee.Email" class="form-label">Email</label>
                                <input asp-for="Employee.Email" type="email" class="form-control" />
                                <span asp-validation-for="Employee.Email" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Employee.Phone" class="form-label">Phone</label>
                                <input asp-for="Employee.Phone" class="form-control" />
                                <span asp-validation-for="Employee.Phone" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <!-- Employment Information -->
                    <div class="form-section">
                        <h4>Employment Information</h4>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label asp-for="Employee.EmployeeId" class="form-label">Employee ID</label>
                                <input asp-for="Employee.EmployeeId" class="form-control" readonly />
                            </div>
                            <div class="form-group">
                                <label asp-for="Employee.Department" class="form-label">Department</label>
                                <select asp-for="Employee.Department" class="form-select">
                                    <option value="">Select Department</option>
                                    <option value="Engineering">Engineering</option>
                                    <option value="Human Resources">Human Resources</option>
                                    <option value="Finance">Finance</option>
                                    <option value="Marketing">Marketing</option>
                                    <option value="Sales">Sales</option>
                                    <option value="Operations">Operations</option>
                                    <option value="IT">IT</option>
                                    <option value="Customer Service">Customer Service</option>
                                    <option value="Administration">Administration</option>
                                    <option value="Safety">Safety</option>
                                </select>
                                <span asp-validation-for="Employee.Department" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label asp-for="Employee.Position" class="form-label">Position</label>
                                <input asp-for="Employee.Position" class="form-control" />
                                <span asp-validation-for="Employee.Position" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Employee.Status" class="form-label">Status</label>
                                <select asp-for="Employee.Status" class="form-select">
                                    <option value="0">Active</option>
                                    <option value="1">Inactive</option>
                                    <option value="2">On Leave</option>
                                    <option value="3">Terminated</option>
                                </select>
                                <span asp-validation-for="Employee.Status" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label asp-for="Employee.Salary" class="form-label">Annual Salary</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input asp-for="Employee.Salary" type="number" step="0.01" class="form-control" />
                                </div>
                                <span asp-validation-for="Employee.Salary" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="Employee.HireDate" class="form-label">Hire Date</label>
                                <input asp-for="Employee.HireDate" type="date" class="form-control" />
                                <span asp-validation-for="Employee.HireDate" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Information -->
                    <div class="form-section full-width">
                        <h4>Additional Information</h4>
                        
                        <div class="form-group">
                            <label asp-for="Employee.Notes" class="form-label">Notes</label>
                            <textarea asp-for="Employee.Notes" class="form-control" rows="4" placeholder="Additional notes about the employee..."></textarea>
                            <span asp-validation-for="Employee.Notes" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="submit" class="btn-save">
                        <i class="fas fa-save me-2"></i>
                        Save Changes
                    </button>
                    <a href="/Employees?companyId=@Model.Employee.CompanyId" class="btn-cancel">
                        <i class="fas fa-times me-2"></i>
                        Cancel
                    </a>
                    <button type="button" class="btn-delete" onclick="confirmDelete('@Model.EmployeeId', '@Model.Employee.FirstName @Model.Employee.LastName')">
                        <i class="fas fa-trash me-2"></i>
                        Delete Employee
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Show messages on page load
        $(document).ready(function() {
            @if(TempData["SuccessMessage"] != null)
            {
                <text>
                Swal.fire({
                    title: 'Success!',
                    text: '@TempData["SuccessMessage"]',
                    icon: 'success',
                    confirmButtonColor: '#10B981',
                    confirmButtonText: 'OK'
                });
                </text>
            }
            
            @if(TempData["ErrorMessage"] != null)
            {
                <text>
                Swal.fire({
                    title: 'Error!',
                    text: '@TempData["ErrorMessage"]',
                    icon: 'error',
                    confirmButtonColor: '#EF4444',
                    confirmButtonText: 'OK'
                });
                </text>
            }
        });

        function confirmDelete(employeeId, employeeName) {
            Swal.fire({
                title: 'Delete Employee?',
                text: `Are you sure you want to delete ${employeeName}? This action cannot be undone.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#EF4444',
                cancelButtonColor: '#6B7280',
                confirmButtonText: '<i class="fas fa-trash me-1"></i>Yes, Delete',
                cancelButtonText: 'Cancel',
                backdrop: true,
                allowOutsideClick: false
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form to delete the employee
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = `/Employees/Delete/${employeeId}`;
                    
                    // Add CSRF token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        const hiddenToken = document.createElement('input');
                        hiddenToken.type = 'hidden';
                        hiddenToken.name = '__RequestVerificationToken';
                        hiddenToken.value = token.value;
                        form.appendChild(hiddenToken);
                    }
                    
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }

        // Enhanced form validation and submit handling
        document.querySelector('.employee-form').addEventListener('submit', function(e) {
            const requiredFields = ['Employee.FirstName', 'Employee.LastName', 'Employee.Email', 'Employee.Department', 'Employee.Position'];
            let isValid = true;
            let emptyFields = [];

            requiredFields.forEach(field => {
                const input = document.querySelector(`@@[name="${field}"]`);
                if (input && !input.value.trim()) {
                    isValid = false;
                    input.classList.add('is-invalid');
                    const labelText = input.labels && input.labels.length > 0 ? input.labels.item(0).textContent : field.split('.').pop();
                    emptyFields.push(labelText);
                } else if (input) {
                    input.classList.remove('is-invalid');
                    input.classList.add('is-valid');
                }
            });

            if (!isValid) {
                e.preventDefault();
                Swal.fire({
                    title: 'Validation Error',
                    text: `Please fill in the following required fields: ${emptyFields.join(', ')}`,
                    icon: 'error',
                    confirmButtonColor: '#EF4444',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            // Show loading overlay and button state
            document.getElementById('loadingOverlay').style.display = 'flex';
            const submitBtn = document.querySelector('.btn-save');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
            submitBtn.disabled = true;

            // Re-enable button after 10 seconds as a fallback
            setTimeout(() => {
                if (submitBtn.disabled) {
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                }
            }, 10000);

            // Allow form submission to proceed normally
            return true;
        });

        // Enhanced real-time validation with better visual feedback
        document.querySelectorAll('.form-control, .form-select').forEach(input => {
            // Email validation
            if (input.type === 'email') {
                input.addEventListener('blur', function() {
                    const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                    if (this.value && !emailRegex.test(this.value)) {
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    } else if (this.value) {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }
            
            // General validation on blur
            input.addEventListener('blur', function() {
                if (this.hasAttribute('required') || this.closest('.form-group').querySelector('.form-label').textContent.includes('*')) {
                    if (!this.value.trim()) {
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    } else {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                }
            });
            
            // Real-time feedback on input
            input.addEventListener('input', function() {
                if (this.classList.contains('is-invalid') && this.value.trim()) {
                    this.classList.remove('is-invalid');
                    if (this.hasAttribute('required') || this.closest('.form-group').querySelector('.form-label').textContent.includes('*')) {
                        this.classList.add('is-valid');
                    }
                }
            });
            
            // Enhanced focus effects
            input.addEventListener('focus', function() {
                this.closest('.form-group').style.transform = 'scale(1.02)';
                this.closest('.form-group').style.transition = 'transform 0.2s ease';
            });
            
            input.addEventListener('blur', function() {
                this.closest('.form-group').style.transform = 'scale(1)';
            });
        });
    </script>
}