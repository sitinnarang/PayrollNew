@page "/Payroll/Employee/{id}"
@using PayrollPro.Employees
@using PayrollPro.Web.Pages.Payroll
@model EmployeeModel
@{
    ViewData["Title"] = "Employee Payroll";
}

@section styles {
    <link rel="stylesheet" href="~/css/employee-management-modern.css?v=@DateTime.Now.Ticks" />
    <style>
        /* Enhanced Payroll UI Styles moved to external CSS file */
        .payroll-animation {
            animation: slideInUp 0.5s ease-out;
        }
        
        .payroll-card {
            transition: all 0.3s ease;
        }
        
        .payroll-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }
        
        .employee-avatar-payroll {
            transition: transform 0.3s ease;
        }
        
        .employee-avatar-payroll:hover {
            transform: scale(1.1);
        }
        
        /* Enhanced button styles */
        .btn-payroll-action {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        .btn-payroll-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            color: white;
        }
        
        /* Enhanced tooltips */
        .tooltip-enhanced {
            position: relative;
        }
        
        .tooltip-enhanced:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 1000;
        }
        
        /* Loading animation for cards */
        .card-loading {
            position: relative;
            overflow: hidden;
        }
        
        .card-loading::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            animation: shimmer 1.5s infinite;
        }
    </style>
}

<div class="employee-management-container">
    <!-- Modern Professional Header -->
    <div class="employee-header">
        <div class="container-fluid">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h1>
                        <i class="fas fa-money-bill-wave me-3"></i>
                        Employee Payroll
                    </h1>
                    <p class="subtitle">@(Model.Employee?.FullName ?? "Employee") - Payroll Information</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn-add-employee" onclick="processPayroll('@Model.Employee.Id')">
                        <i class="fas fa-calculator"></i>
                        Process Payroll
                    </button>
                    <a href="/Employees/Details/@Model.Employee.Id" class="btn btn-outline-light">
                        <i class="fas fa-user me-2"></i> Employee Details
                    </a>
                    <a href="/Employees?companyId=@Model.Employee.CompanyId" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left me-2"></i> Back to Employees
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Employee Summary Card -->
    <div class="payroll-summary-section">
        <div class="employee-summary-card payroll-animation">
            <div class="employee-summary-header">
                <div class="employee-avatar-payroll tooltip-enhanced" data-tooltip="Employee Avatar">
                    @Model.Employee.FirstName.Substring(0, 1)@Model.Employee.LastName.Substring(0, 1)
                </div>
                <div class="employee-summary-info">
                    <h3>@Model.Employee.FullName</h3>
                    <p>@Model.Employee.Position â€¢ @Model.Employee.Department</p>
                    <p class="employee-id">Employee ID: @Model.Employee.EmployeeId</p>
                </div>
                <div class="salary-info">
                    <div class="salary-amount">@Model.Employee.FormattedSalary</div>
                    <div class="salary-label">Annual Salary</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Payroll Information Grid -->
    <div class="payroll-info-grid">
        <!-- Salary Breakdown -->
        <div class="payroll-card payroll-animation" style="animation-delay: 0.1s;">
            <h4><i class="fas fa-calculator me-2"></i>Salary Breakdown</h4>
            <div class="payroll-breakdown">
                <div class="breakdown-item">
                    <label>Annual Salary</label>
                    <value class="amount">@Model.Employee.FormattedSalary</value>
                </div>
                <div class="breakdown-item">
                    <label>Monthly Gross</label>
                    <value class="amount">@((Model.Employee.Salary / 12).ToString("C"))</value>
                </div>
                <div class="breakdown-item">
                    <label>Bi-weekly Gross</label>
                    <value class="amount">@((Model.Employee.Salary / 26).ToString("C"))</value>
                </div>
                <div class="breakdown-item">
                    <label>Weekly Gross</label>
                    <value class="amount">@((Model.Employee.Salary / 52).ToString("C"))</value>
                </div>
                <div class="breakdown-item">
                    <label>Hourly Rate (40hrs/week)</label>
                    <value class="amount">@((Model.Employee.Salary / 2080).ToString("C"))</value>
                </div>
            </div>
        </div>

        <!-- Tax Estimates -->
        <div class="payroll-card payroll-animation" style="animation-delay: 0.2s;">
            <h4><i class="fas fa-receipt me-2"></i>Tax Estimates (Monthly)</h4>
            <div class="tax-breakdown">
                @{
                    var monthlyGross = Model.Employee.Salary / 12;
                    var federalTax = monthlyGross * 0.22m; // Estimated 22% federal
                    var stateTax = monthlyGross * 0.05m; // Estimated 5% state
                    var socialSecurity = monthlyGross * 0.062m; // 6.2% Social Security
                    var medicare = monthlyGross * 0.0145m; // 1.45% Medicare
                    var totalDeductions = federalTax + stateTax + socialSecurity + medicare;
                    var netPay = monthlyGross - totalDeductions;
                }
                <div class="tax-item">
                    <label>Gross Pay</label>
                    <value class="positive">@monthlyGross.ToString("C")</value>
                </div>
                <div class="tax-item">
                    <label>Federal Tax (est.)</label>
                    <value class="deduction">-@federalTax.ToString("C")</value>
                </div>
                <div class="tax-item">
                    <label>State Tax (est.)</label>
                    <value class="deduction">-@stateTax.ToString("C")</value>
                </div>
                <div class="tax-item">
                    <label>Social Security</label>
                    <value class="deduction">-@socialSecurity.ToString("C")</value>
                </div>
                <div class="tax-item">
                    <label>Medicare</label>
                    <value class="deduction">-@medicare.ToString("C")</value>
                </div>
                <div class="tax-item total">
                    <label>Net Pay (est.)</label>
                    <value class="net-pay">@netPay.ToString("C")</value>
                </div>
            </div>
        </div>

        <!-- Employment Details -->
        <div class="payroll-card payroll-animation" style="animation-delay: 0.3s;">
            <h4><i class="fas fa-briefcase me-2"></i>Employment Details</h4>
            <div class="employment-details">
                <div class="detail-row">
                    <label>Hire Date</label>
                    <value>@Model.Employee.HireDate.ToString("MMMM dd, yyyy")</value>
                </div>
                <div class="detail-row">
                    <label>Years of Service</label>
                    <value>@Model.Employee.YearsOfService years</value>
                </div>
                <div class="detail-row">
                    <label>Status</label>
                    <value>
                        <span class="status-badge-payroll status-@(Model.Employee.Status.ToString().ToLower())-payroll">
                            @Model.Employee.Status
                        </span>
                    </value>
                </div>
                <div class="detail-row">
                    <label>Company</label>
                    <value>@Model.Employee.CompanyName</value>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="payroll-card payroll-animation" style="animation-delay: 0.4s;">
            <h4><i class="fas fa-tools me-2"></i>Quick Actions</h4>
            <div class="quick-actions">
                <button class="btn-payroll-action" onclick="processPayroll('@Model.Employee.Id')">
                    <i class="fas fa-play me-2"></i>
                    Process Current Payroll
                </button>
                <button class="btn-payroll-action" onclick="generatePayStub('@Model.Employee.Id')">
                    <i class="fas fa-file-invoice me-2"></i>
                    Generate Pay Stub
                </button>
                <button class="btn-payroll-action" onclick="viewPayHistory('@Model.Employee.Id')">
                    <i class="fas fa-history me-2"></i>
                    View Pay History
                </button>
                <a href="/Employees/Edit/@Model.Employee.Id" class="btn-payroll-action" style="text-decoration: none;">
                    <i class="fas fa-edit me-2"></i>
                    Edit Employee
                </a>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function processPayroll(employeeId) {
            Swal.fire({
                title: 'Process Payroll',
                text: 'Are you ready to process payroll for this employee?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10B981',
                cancelButtonColor: '#6B7280',
                confirmButtonText: '<i class="fas fa-calculator me-1"></i>Process Payroll',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Calculating payroll for employee.',
                        icon: 'info',
                        timer: 2000,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    }).then(() => {
                        // Redirect to payroll processing page
                        window.location.href = `/Payroll/Process?employeeId=${employeeId}`;
                    });
                }
            });
        }

        function generatePayStub(employeeId) {
            Swal.fire({
                title: 'Generate Pay Stub',
                text: 'Select the pay period for the pay stub:',
                input: 'select',
                inputOptions: {
                    'current': 'Current Period',
                    'previous': 'Previous Period',
                    'custom': 'Custom Date Range'
                },
                inputPlaceholder: 'Select pay period',
                showCancelButton: true,
                confirmButtonText: 'Generate',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Please select a pay period';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Generating Pay Stub...',
                        text: 'Creating PDF pay stub.',
                        icon: 'info',
                        timer: 2000,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    }).then(() => {
                        Swal.fire({
                            title: 'Pay Stub Generated!',
                            text: 'The pay stub has been generated successfully.',
                            icon: 'success',
                            confirmButtonText: 'Download PDF',
                            confirmButtonColor: '#10B981'
                        });
                    });
                }
            });
        }

        function viewPayHistory(employeeId) {
            // This would typically redirect to a pay history page
            Swal.fire({
                title: 'Pay History',
                text: 'This feature will show the complete pay history for this employee.',
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }

        // Enhanced UI interactions on page load
        $(document).ready(function() {
            // Add loading animation to cards on scroll
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('card-loading');
                        setTimeout(() => {
                            entry.target.classList.remove('card-loading');
                        }, 1000);
                    }
                });
            }, observerOptions);

            // Observe all payroll cards
            document.querySelectorAll('.payroll-card').forEach(card => {
                observer.observe(card);
            });

            // Add hover effects to amount values
            $('.amount, .positive, .negative').hover(
                function() {
                    $(this).css('transform', 'scale(1.05)');
                },
                function() {
                    $(this).css('transform', 'scale(1)');
                }
            );

            // Add click animation to action buttons
            $('.btn-payroll-action').click(function() {
                $(this).addClass('clicked');
                setTimeout(() => {
                    $(this).removeClass('clicked');
                }, 200);
            });
        });

        // Add clicked animation CSS
        const style = document.createElement('style');
        style.textContent = `
            .clicked {
                transform: scale(0.95) !important;
                transition: transform 0.1s ease !important;
            }
        `;
        document.head.appendChild(style);
    </script>
}