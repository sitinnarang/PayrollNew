@page "/Companies/{id:guid}"
@using PayrollPro.Companies
@using PayrollPro.Web.Pages.Companies
@model DetailsModel
@{
    ViewData["Title"] = $"{Model.Company.Name} - Company Dashboard";
}

@section styles {
    <!-- SweetAlert2 for Professional Notifications -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="~/css/company-dashboard-modern.css" />
}

<div class="dashboard-container">
    <!-- Modern Professional Header -->
    <div class="dashboard-header">
        <div class="container-fluid">
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(Model.Company.LogoUrl))
                    {
                        <img src="@Model.Company.LogoUrl" alt="@Model.Company.Name Logo" class="company-logo me-4">
                    }
                    else
                    {
                        <div class="company-logo me-4 d-flex align-items-center justify-content-center">
                            <i class="fas fa-building fa-2x text-white"></i>
                        </div>
                    }
                    <div class="company-info">
                        <h1>@Model.Company.Name</h1>
                        <div class="company-meta">
                            <div class="meta-item">
                                <i class="fas fa-code"></i>
                                <span>@Model.Company.Code</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>@Model.Company.Address</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-users"></i>
                                <span>@Model.Company.EmployeeCount employees</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-check-circle"></i>
                                <span>@(Model.Company.IsActive ? "Active" : "Inactive")</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="action-buttons d-flex">
                    <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#payrollSettingsModal">
                        <i class="fas fa-cog me-2"></i> Settings
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left me-2"></i> Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Dashboard Content -->
    <div class="container-fluid p-4">
        <!-- Payroll Engine Section -->
        <div class="payroll-engine-section">
            <div class="payroll-engine-header">
                <h3>
                    <i class="fas fa-calculator"></i>
                    Payroll Engine
                </h3>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm" onclick="schedulePayroll()">
                        <i class="fas fa-clock me-1"></i> Schedule
                    </button>
                    <button class="btn btn-sm" onclick="viewPayrollHistory()">
                        <i class="fas fa-history me-1"></i> History
                    </button>
                </div>
            </div>
            
            <div class="payroll-stats-grid">
                <div class="payroll-stat-card" style="--delay: 0">
                    <div class="icon">
                        <i class="fas fa-play-circle"></i>
                    </div>
                    <h6>Next Payroll</h6>
                    <div class="value">End of Month</div>
                </div>
                <div class="payroll-stat-card" style="--delay: 1">
                    <div class="icon">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <h6>Monthly Budget</h6>
                    <div class="value">$45,000</div>
                </div>
                <div class="payroll-stat-card" style="--delay: 2">
                    <div class="icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <h6>Processed</h6>
                    <div class="value">12 this month</div>
                </div>
                <div class="payroll-stat-card" style="--delay: 3">
                    <div class="icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h6>Pending</h6>
                    <div class="value">3 reviews</div>
                </div>
            </div>
        </div>

        <!-- Main Dashboard Grid -->
        <div class="row">
            <div class="col-lg-8">
                <!-- Action Buttons Grid -->
                <div class="action-buttons-grid">
                    <a href="javascript:void(0)" onclick="runPayrollEngine()" class="action-button success" style="--delay: 0">
                        <div class="icon">
                            <i class="fas fa-play"></i>
                        </div>
                        <div class="content">
                            <h5>Run Payroll Engine</h5>
                            <p>Process current period payroll for all employees</p>
                        </div>
                    </a>
                    
                    <a href="javascript:void(0)" onclick="calculatePayroll()" class="action-button primary" style="--delay: 1">
                        <div class="icon">
                            <i class="fas fa-calculator"></i>
                        </div>
                        <div class="content">
                            <h5>Calculate Preview</h5>
                            <p>Preview payroll calculations without processing</p>
                        </div>
                    </a>
                    
                    <a href="javascript:void(0)" onclick="processIndividualPayroll()" class="action-button info" style="--delay: 2">
                        <div class="icon">
                            <i class="fas fa-user-check"></i>
                        </div>
                        <div class="content">
                            <h5>Process Individual</h5>
                            <p>Process single employee payroll</p>
                        </div>
                    </a>
                    
                    <a href="/Timesheets?companyId=@Model.Company.Id" class="action-button warning" style="--delay: 3">
                        <div class="icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="content">
                            <h5>Manage Timesheets</h5>
                            <p>Review and approve employee hours</p>
                        </div>
                    </a>
                    
                    <a href="javascript:void(0)" onclick="generateReports()" class="action-button primary" style="--delay: 4">
                        <div class="icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="content">
                            <h5>Generate Reports</h5>
                            <p>Payroll summaries and statements</p>
                        </div>
                    </a>
                    
                    <a href="/Employees/Create?companyId=@Model.Company.Id" class="action-button success" style="--delay: 5">
                        <div class="icon">
                            <i class="fas fa-user-plus"></i>
                        </div>
                        <div class="content">
                            <h5>Add Employee</h5>
                            <p>Add new employee to the company</p>
                        </div>
                    </a>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Company Overview Card -->
                <div class="company-overview-card">
                    <div class="company-overview-header">
                        <h4>
                            <i class="fas fa-chart-line me-2"></i>Company Overview
                        </h4>
                    </div>
                    <div class="overview-stats">
                        <div class="overview-stat">
                            <div class="overview-stat-value">@Model.Company.EmployeeCount</div>
                            <div class="overview-stat-label">Total Employees</div>
                        </div>
                        
                        <div class="overview-stat-grid">
                            <div class="overview-stat-item">
                                <div class="overview-stat-item-value success">@(Model.Company.EmployeeCount - 2)</div>
                                <div class="overview-stat-item-label">Active</div>
                            </div>
                            <div class="overview-stat-item">
                                <div class="overview-stat-item-value warning">2</div>
                                <div class="overview-stat-item-label">On Leave</div>
                            </div>
                        </div>
                        
                        <div class="overview-stat">
                            <div class="overview-stat-value">@((DateTime.Now.Year - Model.Company.EstablishedDate.Year))</div>
                            <div class="overview-stat-label">Years in Business</div>
                        </div>
                        
                        <div class="overview-stat">
                            <div class="overview-stat-value">$45,230</div>
                            <div class="overview-stat-label">Monthly Payroll</div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="quick-actions-card">
                    <div class="quick-actions-header">
                        <h4>
                            <i class="fas fa-bolt me-2"></i>Quick Actions
                        </h4>
                    </div>
                    <div class="quick-actions-body">
                        <button class="quick-action-btn" onclick="viewReports()">
                            <i class="fas fa-chart-bar"></i>View Reports
                        </button>
                        <button class="quick-action-btn" onclick="backupData()">
                            <i class="fas fa-download"></i>Backup Data
                        </button>
                        <button class="quick-action-btn" onclick="exportData()">
                            <i class="fas fa-file-export"></i>Export Payroll
                        </button>
                        <a href="/Employees?companyId=@Model.Company.Id" class="quick-action-btn">
                            <i class="fas fa-users"></i>Manage Employees
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Company Information Card -->
        <div class="info-card">
            <div class="info-card-header">
                <ul class="nav nav-tabs" id="companyTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">
                            <i class="fas fa-info-circle me-1"></i>Company Info
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact" type="button" role="tab">
                            <i class="fas fa-address-book me-1"></i>Contact Details
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="legal-tab" data-bs-toggle="tab" data-bs-target="#legal" type="button" role="tab">
                            <i class="fas fa-gavel me-1"></i>Legal Information
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="timeline-tab" data-bs-toggle="tab" data-bs-target="#timeline" type="button" role="tab">
                            <i class="fas fa-clock me-1"></i>Timeline
                        </button>
                    </li>
                </ul>
            </div>
            <div class="info-card-body">
                <div class="tab-content" id="companyTabsContent">
                    <!-- Company Information Tab -->
                    <div class="tab-pane fade show active" id="info" role="tabpanel">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Company Name</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-building"></i>
                                        @Model.Company.Name
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Company Code</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-code"></i>
                                        @Model.Company.Code
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="info-field">
                                    <div class="info-field-label">Description</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-align-left"></i>
                                        @(string.IsNullOrEmpty(Model.Company.Description) ? "No description provided." : Model.Company.Description)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Established Date</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-calendar"></i>
                                        @Model.Company.EstablishedDate.ToString("MMMM dd, yyyy")
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Employee Count</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-users"></i>
                                        @Model.Company.EmployeeCount employees
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Contact Information Tab -->
                    <div class="tab-pane fade" id="contact" role="tabpanel">
                        <div class="row">
                            <div class="col-12">
                                <div class="info-field">
                                    <div class="info-field-label">Address</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-map-marker-alt"></i>
                                        @Model.Company.Address
                                        @if (!string.IsNullOrEmpty(Model.Company.City))
                                        {
                                            <br><span class="text-muted">@Model.Company.City</span>
                                            @if (!string.IsNullOrEmpty(Model.Company.State))
                                            {
                                                <span class="text-muted">, @Model.Company.State</span>
                                            }
                                            @if (!string.IsNullOrEmpty(Model.Company.ZipCode))
                                            {
                                                <span class="text-muted"> @Model.Company.ZipCode</span>
                                            }
                                        }
                                        @if (!string.IsNullOrEmpty(Model.Company.Country))
                                        {
                                            <br><span class="text-muted">@Model.Company.Country</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Phone Number</div>
                                    <div class="info-field-value">
                                        @if (!string.IsNullOrEmpty(Model.Company.Phone))
                                        {
                                            <i class="fas fa-phone"></i>
                                            <a href="tel:@Model.Company.Phone">@Model.Company.Phone</a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not provided</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Email Address</div>
                                    <div class="info-field-value">
                                        @if (!string.IsNullOrEmpty(Model.Company.Email))
                                        {
                                            <i class="fas fa-envelope"></i>
                                            <a href="mailto:@Model.Company.Email">@Model.Company.Email</a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not provided</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="info-field">
                                    <div class="info-field-label">Website</div>
                                    <div class="info-field-value">
                                        @if (!string.IsNullOrEmpty(Model.Company.Website))
                                        {
                                            <i class="fas fa-globe"></i>
                                            <a href="@Model.Company.Website" target="_blank">
                                                @Model.Company.Website <i class="fas fa-external-link-alt ms-1 small"></i>
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not provided</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Legal Information Tab -->
                    <div class="tab-pane fade" id="legal" role="tabpanel">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Tax ID</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-id-card"></i>
                                        @(string.IsNullOrEmpty(Model.Company.TaxId) ? "Not provided" : Model.Company.TaxId)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="info-field">
                                    <div class="info-field-label">Registration Number</div>
                                    <div class="info-field-value">
                                        <i class="fas fa-certificate"></i>
                                        @(string.IsNullOrEmpty(Model.Company.RegistrationNumber) ? "Not provided" : Model.Company.RegistrationNumber)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Timeline Tab -->
                    <div class="tab-pane fade" id="timeline" role="tabpanel">
                        <div class="timeline">
                            <div class="timeline-item">
                                <div class="timeline-marker success"></div>
                                <div class="timeline-content">
                                    <h6>Company Established</h6>
                                    <p>@Model.Company.EstablishedDate.ToString("MMMM dd, yyyy")</p>
                                </div>
                            </div>
                            <div class="timeline-item">
                                <div class="timeline-marker primary"></div>
                                <div class="timeline-content">
                                    <h6>Record Created</h6>
                                    <p>@Model.Company.CreationTime.ToString("MMMM dd, yyyy")</p>
                                </div>
                            </div>
                            @if (Model.Company.LastModificationTime.HasValue)
                            {
                                <div class="timeline-item">
                                    <div class="timeline-marker warning"></div>
                                    <div class="timeline-content">
                                        <h6>Last Updated</h6>
                                        <p>@Model.Company.LastModificationTime.Value.ToString("MMMM dd, yyyy")</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payroll Settings Modal -->
<div class="modal fade" id="payrollSettingsModal" tabindex="-1" aria-labelledby="payrollSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="payrollSettingsForm">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="payrollSettingsModalLabel">
                        <i class="fas fa-cog me-2"></i>Payroll Settings
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="PayrollSettings.PayFrequency" class="form-label">Pay Frequency</label>
                            <select asp-for="PayrollSettings.PayFrequency" class="form-select">
                                <option value="0">Weekly</option>
                                <option value="1">BiWeekly</option>
                                <option value="2">Monthly</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="PayrollSettings.PayPeriodEnd" class="form-label">Pay Period End</label>
                            <input asp-for="PayrollSettings.PayPeriodEnd" type="date" class="form-control">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="PayrollSettings.StandardWorkHours" class="form-label">Standard Work Hours</label>
                            <input asp-for="PayrollSettings.StandardWorkHours" type="number" class="form-control" min="1" max="60" step="1">
                            <span asp-validation-for="PayrollSettings.StandardWorkHours" class="text-danger"></span>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="PayrollSettings.OvertimeRate" class="form-label">Overtime Rate</label>
                            <div class="input-group">
                                <input asp-for="PayrollSettings.OvertimeRate" type="number" class="form-control" step="0.1" min="1" max="5">
                                <span class="input-group-text">x</span>
                            </div>
                            <span asp-validation-for="PayrollSettings.OvertimeRate" class="text-danger"></span>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input asp-for="PayrollSettings.AutoProcessPayroll" class="form-check-input" type="checkbox">
                                <label asp-for="PayrollSettings.AutoProcessPayroll" class="form-check-label">
                                    Auto-process payroll at period end
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>Save Settings
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Deletion
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong>@Model.Company.Name</strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action cannot be undone. All associated employees, payrolls, and data will be permanently deleted.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="fas fa-trash me-1"></i>Delete Company
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Payroll Engine Processing Modal -->
<div class="modal fade" id="payrollProcessingModal" tabindex="-1" aria-labelledby="payrollProcessingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="payrollProcessingModalLabel">
                    <i class="fas fa-calculator me-2"></i>Payroll Engine
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="payrollProcessingContent">
                    <div class="text-center py-4">
                        <div class="spinner-border text-success mb-3" role="status">
                            <span class="visually-hidden">Processing...</span>
                        </div>
                        <h5>Processing Payroll...</h5>
                        <p class="text-muted">Please wait while we calculate payroll for all employees.</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    // Payroll Engine Functions
    function runPayrollEngine() {
        Swal.fire({
            title: 'Run Payroll Engine?',
            text: 'This will process payroll for all active employees in the current pay period.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="fas fa-play me-1"></i>Yes, Run Payroll',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                // Show processing modal
                var modal = new bootstrap.Modal(document.getElementById('payrollProcessingModal'));
                modal.show();
                
                // Simulate payroll processing
                setTimeout(() => {
                    modal.hide();
                    Swal.fire({
                        title: 'Payroll Processing Complete!',
                        text: 'Payroll has been successfully processed for @Model.Company.EmployeeCount employees.',
                        icon: 'success',
                        confirmButtonText: 'View Results',
                        confirmButtonColor: '#28a745'
                    }).then(() => {
                        // Redirect to payroll results or refresh page
                        window.location.reload();
                    });
                }, 3000);
            }
        });
    }

    function calculatePayroll() {
        Swal.fire({
            title: 'Calculate Payroll Preview?',
            text: 'This will generate a preview of payroll calculations without processing payments.',
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#007bff',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="fas fa-calculator me-1"></i>Calculate Preview',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Preview Generated!',
                    text: 'Payroll preview has been calculated. Total estimated payout: $45,230.50',
                    icon: 'success',
                    confirmButtonText: 'View Details',
                    confirmButtonColor: '#007bff'
                });
            }
        });
    }

    function generateReports() {
        Swal.fire({
            title: 'Generate Payroll Reports',
            text: 'Select the type of report you want to generate:',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#ffc107',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="fas fa-file-alt me-1"></i>Generate Reports',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Reports Generated!',
                    text: 'Payroll reports have been generated and are ready for download.',
                    icon: 'success',
                    confirmButtonText: 'Download',
                    confirmButtonColor: '#ffc107'
                });
            }
        });
    }

    function processIndividualPayroll() {
        // Get list of employees for this company
        Swal.fire({
            title: 'Select Employee',
            text: 'Choose an employee to process individual payroll:',
            icon: 'question',
            html: `
                <div class="mt-3">
                    <select id="employeeSelect" class="form-select">
                        <option value="">Select an employee...</option>
                        <option value="emp1">John Doe - Software Engineer</option>
                        <option value="emp2">Jane Smith - HR Manager</option>
                        <option value="emp3">Bob Johnson - Sales Rep</option>
                        <option value="emp4">Alice Brown - Accountant</option>
                    </select>
                </div>
            `,
            showCancelButton: true,
            confirmButtonColor: '#17a2b8',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="fas fa-user-check me-1"></i>Process Payroll',
            cancelButtonText: 'Cancel',
            preConfirm: () => {
                const employee = document.getElementById('employeeSelect').value;
                if (!employee) {
                    Swal.showValidationMessage('Please select an employee');
                }
                return employee;
            }
        }).then((result) => {
            if (result.isConfirmed) {
                // For demo purposes, using a placeholder employee ID
                // In real implementation, you would get the actual employee ID from the selection
                const demoEmployeeId = 'a80ca0f2-450e-419c-f4ae-3a1cb48d7ebf';
                const companyId = '@Model.Company.Id';
                window.location.href = `/Payroll/Process?companyId=${companyId}&employeeId=${demoEmployeeId}`;
            }
        });
    }

    function manageTimesheets() {
        Swal.fire({
            title: 'Timesheet Management',
            text: 'Opening timesheet management for review and approval.',
            icon: 'info',
            confirmButtonText: 'Open Timesheets',
            confirmButtonColor: '#17a2b8'
        }).then(() => {
            // Redirect to timesheet management page
            window.location.href = '/Timesheets?companyId=@Model.Company.Id';
        });
    }

    function schedulePayroll() {
        Swal.fire({
            title: 'Schedule Payroll',
            text: 'Set up automatic payroll processing schedule.',
            icon: 'info',
            confirmButtonText: 'Configure Schedule',
            confirmButtonColor: '#6f42c1'
        });
    }

    function viewPayrollHistory() {
        Swal.fire({
            title: 'Payroll History',
            text: 'Opening payroll processing history and records.',
            icon: 'info',
            confirmButtonText: 'View History',
            confirmButtonColor: '#fd7e14'
        }).then(() => {
            // Redirect to payroll history page
            window.location.href = '/Payrolls?companyId=@Model.Company.Id';
        });
    }

    // Quick Actions Functions
    function addEmployee() {
        window.location.href = '/Employees/Create?companyId=@Model.Company.Id';
    }

    function viewReports() {
        Swal.fire({
            title: 'Company Reports',
            text: 'Opening comprehensive company and payroll reports.',
            icon: 'info',
            confirmButtonText: 'View Reports',
            confirmButtonColor: '#17a2b8'
        });
    }

    function backupData() {
        Swal.fire({
            title: 'Backup Company Data?',
            text: 'This will create a backup of all company and payroll data.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#ffc107',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="fas fa-download me-1"></i>Create Backup',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Backup Created!',
                    text: 'Company data backup has been successfully created and is ready for download.',
                    icon: 'success',
                    confirmButtonText: 'Download Backup',
                    confirmButtonColor: '#28a745'
                });
            }
        });
    }

    function exportData() {
        Swal.fire({
            title: 'Export Payroll Data?',
            text: 'This will export current payroll data to Excel format.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#6c757d',
            confirmButtonText: '<i class="fas fa-file-export me-1"></i>Export Data',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Export Complete!',
                    text: 'Payroll data has been exported successfully.',
                    icon: 'success',
                    confirmButtonText: 'Download File',
                    confirmButtonColor: '#28a745'
                });
            }
        });
    }

    // Settings Functions
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Handle payroll settings form submission
        const payrollForm = document.getElementById('payrollSettingsForm');
        if (payrollForm) {
            payrollForm.addEventListener('submit', function(e) {
                e.preventDefault();
                savePayrollSettings();
            });
        }

        // Initialize modal with default values when opened
        const payrollModal = document.getElementById('payrollSettingsModal');
        if (payrollModal) {
            payrollModal.addEventListener('show.bs.modal', function() {
                // Ensure default values are set if fields are empty
                const standardHoursInput = payrollForm.querySelector('input[name="PayrollSettings.StandardWorkHours"]');
                const overtimeRateInput = payrollForm.querySelector('input[name="PayrollSettings.OvertimeRate"]');
                
                if (!standardHoursInput.value || standardHoursInput.value === '0') {
                    standardHoursInput.value = '40';
                }
                
                if (!overtimeRateInput.value || overtimeRateInput.value === '0' || overtimeRateInput.value === '0.0') {
                    overtimeRateInput.value = '1.5';
                }
                
                // Set default pay period end if not set
                const payPeriodInput = payrollForm.querySelector('input[name="PayrollSettings.PayPeriodEnd"]');
                if (!payPeriodInput.value) {
                    const nextMonth = new Date();
                    nextMonth.setMonth(nextMonth.getMonth() + 1);
                    payPeriodInput.value = nextMonth.toISOString().split('T')[0];
                }
            });
        }
    });

    function savePayrollSettings() {
        const form = document.getElementById('payrollSettingsForm');
        const formData = new FormData(form);
        
        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        formData.append('__RequestVerificationToken', token);
        formData.append('handler', 'SavePayrollSettings');

        // Show loading state
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';
        submitBtn.disabled = true;

        fetch(window.location.pathname, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Settings Saved!',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#28a745'
                }).then(() => {
                    var modal = bootstrap.Modal.getInstance(document.getElementById('payrollSettingsModal'));
                    modal.hide();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message,
                    icon: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred while saving settings.',
                icon: 'error',
                confirmButtonText: 'OK',
                confirmButtonColor: '#dc3545'
            });
        })
        .finally(() => {
            // Restore button state
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        });
    }

    // Delete Function
    function confirmDelete() {
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = window.location.pathname;
        
        var input = document.createElement('input');
        input.type = 'hidden';
        input.name = '__RequestVerificationToken';
        input.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
        form.appendChild(input);
        
        var handlerInput = document.createElement('input');
        handlerInput.type = 'hidden';
        handlerInput.name = 'handler';
        handlerInput.value = 'Delete';
        form.appendChild(handlerInput);
        
        document.body.appendChild(form);
        form.submit();
    }
    </script>
}

<!-- Anti-forgery token for forms -->
@Html.AntiForgeryToken()

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong>@Model.Company.Name</strong>?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" asp-page-handler="Delete" class="d-inline">
                    <input type="hidden" asp-for="Company.Id" />
                    <button type="submit" class="btn btn-danger">Delete Company</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .timeline {
        position: relative;
    }
    
    .timeline::before {
        content: '';
        position: absolute;
        left: 6px;
        top: 12px;
        bottom: 0;
        width: 1px;
        background: #dee2e6;
    }
    
    .timeline-marker {
        position: relative;
        z-index: 1;
    }
</style>